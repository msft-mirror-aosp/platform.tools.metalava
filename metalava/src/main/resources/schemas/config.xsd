<!--
  ~ Copyright (C) 2024 The Android Open Source Project
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<!--
 ! Schema for a configuration file supplied to Metalava with the `‐‐config-file` option.
 !
 ! While this is used at runtime to validate config files during parsing its main purpose is for use by editors to
 ! provide support for editing configuration files, e.g. providing auto-completion, validation while typing, etc.
 !
 ! As any element defined as a child of <xs:schema> can be used as a root element, which would often result in an
 ! invalid document this only creates a single such element. For other elements it defines them where they are used in
 ! terms of a top level <xs:complexType>. That prevents them from being used as root element while limiting the nested
 ! depth of this file. That is a common approach and in fact is used in the XMLSchema that applies to this file.
 !
 ! Elements use lower case, hyphenated names. Types use camel case names that start with an upper case letter to
 ! differentiate them.
 !-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified"
           targetNamespace="http://www.google.com/tools/metalava/config"
            xmlns:config="http://www.google.com/tools/metalava/config">
    <xs:element name="config">
        <xs:annotation>
            <xs:documentation>
                Root element of every configuration file.
            </xs:documentation>
        </xs:annotation>
        <xs:complexType>
            <xs:choice>
                <xs:element name="api-surfaces" type="config:ApiSurfacesType" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>
                            The definitions of a set of API surfaces.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
                <xs:element name="api-flags" type="config:ApiFlagsType" minOccurs="0">
                    <xs:annotation>
                        <xs:documentation>
                            The definitions of a set of API flags.
                        </xs:documentation>
                    </xs:annotation>
                </xs:element>
            </xs:choice>
        </xs:complexType>

        <!-- A key that makes sure that API surface names are unique within the containing file. -->
        <xs:key name="ApiSurfaceByName">
            <xs:selector xpath=".//config:api-surface"/>
            <xs:field xpath="@name"/>
        </xs:key>

        <!--
         ! A key reference that makes sure that `extends` attributes reference a surface defined within the containing
         ! file.
         !-->
        <xs:keyref name="ApiSurfaceExtendsKeyRef" refer="config:ApiSurfaceByName">
            <xs:selector xpath=".//config:api-surface"/>
            <xs:field xpath="@extends"/>
        </xs:keyref>

        <!--
         ! A key that makes sure that API flag qualified names (package plus name) are unique within the containing
         ! file.
         !-->
        <xs:key name="ApiFlagByQualifiedName">
            <xs:selector xpath=".//config:api-flag"/>
            <xs:field xpath="@package"/>
            <xs:field xpath="@name"/>
        </xs:key>

    </xs:element>

    <xs:complexType name="ApiSurfacesType">
        <xs:annotation>
            <xs:documentation>
                The type of the `api-surfaces` element defined inside `config`.
            </xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="api-surface" type="config:ApiSurfaceType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        API surface definition.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:simpleType name="ApiSurfaceNameType">
        <xs:annotation>
            <xs:documentation>
                The allowable type of an API surface name. Can only include lower case letters and hyphens.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-z-]+"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:complexType name="ApiSurfaceType">
        <xs:annotation>
            <xs:documentation>
                The type of the `api-surface` element defined inside `ApiSurfacesType`.
            </xs:documentation>
        </xs:annotation>
        <xs:choice/>
        <xs:attribute name="name" type="config:ApiSurfaceNameType" use="required">
            <xs:annotation>
                <xs:documentation>
                    The required name of the surface.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="extends" type="config:ApiSurfaceNameType">
            <xs:annotation>
                <xs:documentation>
                    The optional name of the surface that this surface extends.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
    </xs:complexType>

    <xs:complexType name="ApiFlagsType">
        <xs:annotation>
            <xs:documentation>
                The type of the `api-flags` element defined inside `config`.
            </xs:documentation>
        </xs:annotation>
        <xs:choice>
            <xs:element name="api-flag" type="config:ApiFlagType" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                    <xs:documentation>
                        API flag definition.
                    </xs:documentation>
                </xs:annotation>
            </xs:element>
        </xs:choice>
    </xs:complexType>

    <xs:complexType name="ApiFlagType">
        <xs:annotation>
            <xs:documentation>
                The type of the `api-flag` element defined inside `ApiSurfacesType`.
            </xs:documentation>
        </xs:annotation>
        <xs:choice/>
        <xs:attribute name="package" type="config:ApiFlagPackageNameType" use="required">
            <xs:annotation>
                <xs:documentation>
                    The required package of the flag.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="name" type="config:ApiFlagNameType" use="required">
            <xs:annotation>
                <xs:documentation>
                    The required name of the flag.
                </xs:documentation>
            </xs:annotation>
        </xs:attribute>
        <xs:attribute name="mutability" use="required">
            <xs:annotation>
                <xs:documentation>
                    The required mutability of the flag.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="mutable">
                        <xs:annotation>
                            <xs:documentation>
                                The flag status can be changed.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="immutable">
                        <xs:annotation>
                            <xs:documentation>
                                The flag status is fixed.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
        <xs:attribute name="status" use="required">
            <xs:annotation>
                <xs:documentation>
                    The status of the flag.
                </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
                <xs:restriction base="xs:string">
                    <xs:enumeration value="enabled">
                        <xs:annotation>
                            <xs:documentation>
                                The flag is enabled.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                    <xs:enumeration value="disabled">
                        <xs:annotation>
                            <xs:documentation>
                                The flag is disabled.
                            </xs:documentation>
                        </xs:annotation>
                    </xs:enumeration>
                </xs:restriction>
            </xs:simpleType>
        </xs:attribute>
    </xs:complexType>

    <xs:simpleType name="ApiFlagPackageNameType">
        <xs:annotation>
            <xs:documentation>
                The allowable type of an API package name. Can only include lower case letters, decimal digits,
                underscores and `.` separators.

                This is not as strict as the upstream flag package name check, but it is sufficient for Metalava.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-z0-9_.]+"/>
        </xs:restriction>
    </xs:simpleType>

    <xs:simpleType name="ApiFlagNameType">
        <xs:annotation>
            <xs:documentation>
                The allowable type of an API surface name. Can only include lower case letters, decimal digits and
                underscores.

                This is not as strict as the upstream flag name check, but it is sufficient for Metalava.
            </xs:documentation>
        </xs:annotation>
        <xs:restriction base="xs:string">
            <xs:pattern value="[a-z0-9_]+"/>
        </xs:restriction>
    </xs:simpleType>
</xs:schema>
