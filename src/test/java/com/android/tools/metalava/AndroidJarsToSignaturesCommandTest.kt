/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.tools.metalava

import com.android.tools.metalava.testing.BaseCommandTest
import java.io.File
import kotlin.test.assertEquals
import org.junit.Assert
import org.junit.Test

class AndroidJarsToSignaturesCommandTest : BaseCommandTest() {

    @Test
    fun `Test help`() {
        commandTest {
            args += listOf("android-jars-to-signatures")

            expectedStdout =
                """
Aborting: Usage: metalava android-jars-to-signatures [options] <android-root-dir>

  Rewrite the signature files in the `prebuilts/sdk` directory in the Android source tree by reading the API defined in
  the `android.jar` files.

Options:
  -h, -?, --help                             Show this message and exit

$SIGNATURE_FORMAT_OPTIONS_HELP

Arguments:
  <android-root-dir>                         The root directory of the Android source tree. The new signature files will
                                             be generated in the `prebuilts/sdk/<api>/public/api/android.txt`
                                             sub-directories.
            """
                    .trimIndent()
        }
    }

    @Test
    fun `Test not Android dir`() {
        commandTest {
            val notAndroidRoot = folder()

            args += "android-jars-to-signatures"
            args += notAndroidRoot.path

            expectedStderr =
                """
                    Aborting: <android-root-dir> does not point to an Android source tree
                """
                    .trimIndent()
        }
    }

    @Test
    fun `Test convert jars`() {
        // Get the location of an android.jar in the prebuilts/sdk files generated by the build.
        val prebuiltsSdkDir = File(System.getenv("METALAVA_TEST_PREBUILTS_SDK_ROOT"))
        if (!prebuiltsSdkDir.isDirectory) {
            Assert.fail("test prebuilts not found: $prebuiltsSdkDir")
        }
        val androidJar = prebuiltsSdkDir.resolve("30/public/android.jar")

        commandTest {
            // Copy the android.jar into a temporary folder structure.
            val androidRootDir = folder()

            fun oldAndroidJarFile(apiVersion: Int): String {
                return "prebuilts/tools/common/api-versions/android-$apiVersion/android.jar"
            }
            fun currentVersionDir(apiVersion: Int): String {
                return "prebuilts/sdk/$apiVersion/public"
            }
            fun currentApiDir(apiVersion: Int): String {
                return "${currentVersionDir(apiVersion)}/api"
            }
            fun currentAndroidJarFile(apiVersion: Int): String {
                return "${currentVersionDir(apiVersion)}/android.jar"
            }
            fun currentApiTxtFile(apiVersion: Int): String {
                return "${currentApiDir(apiVersion)}/android.txt"
            }

            data class ApiVersionInfo(val version: Int, val inputAndroidJarFile: File)
            val apiVersionsInfo = mutableListOf<ApiVersionInfo>()

            // The first few android.jars are not in prebuilts/sdk
            // However, the android.txt files are still output to prebuilts/sdk.
            for (apiVersion in 1..3) {
                val versionJar = androidRootDir.resolve(oldAndroidJarFile(apiVersion))
                // Add to the list of api versions.
                apiVersionsInfo.add(ApiVersionInfo(apiVersion, versionJar))
            }
            // The remaining android.jars are in prebuilts/sdk/<N>/public/android.jar.
            for (apiVersion in 4..5) {
                val versionJar = androidRootDir.resolve(currentAndroidJarFile(apiVersion))
                // Add to the list of api versions.
                apiVersionsInfo.add(ApiVersionInfo(apiVersion, versionJar))
            }

            // Set up the input file structure.
            for (apiVersionInfo in apiVersionsInfo) {
                // Copy the android.jar created in the build.gradle.kts file.
                androidJar.copyTo(apiVersionInfo.inputAndroidJarFile, overwrite = true)

                // Make sure the directory for the android.txt file exists.
                androidRootDir.resolve(currentApiDir(apiVersionInfo.version)).mkdirs()
            }

            args += "android-jars-to-signatures"
            args += androidRootDir.path

            // Verify that all generated android.txt files have the correct content. They are
            // currently all the same.
            for (apiVersionInfo in apiVersionsInfo) {
                verify {
                    val apiVersion = apiVersionInfo.version
                    val file = androidRootDir.resolve(currentApiTxtFile(apiVersion))
                    val contents = file.readText()
                    assertEquals(
                        """
// Signature format: 2.0
package android.test {

  public class ClassAddedInApi30 {
    method public void methodAddedInApi30();
  }

}

package java.lang {

  public class Object {
    ctor public Object();
  }

}


        """
                            .trimIndent(),
                        contents,
                        message = "incorrect output for $apiVersionInfo",
                    )
                }
            }
        }
    }
}
